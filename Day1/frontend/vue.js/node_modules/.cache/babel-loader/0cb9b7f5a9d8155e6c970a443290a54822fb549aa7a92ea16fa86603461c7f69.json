{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      products: [],\n      // 商品リストを格納\n      selectedProduct: null,\n      // 選択された商品の情報を格納\n      dialogVisible: false // モーダルの表示/非表示を制御\n    };\n  },\n  methods: {\n    // 商品リストをAPIから取得\n    async fetchProducts() {\n      try {\n        // APIリクエスト\n        // const response = await axios.get(\"http://18.178.128.74:3000/api/products\");\n        const response = await axios.get(\"http://localhost:3000/api/products\"); // ローカルで立ち上げる場合\n        // 商品リストをデータに設定\n        this.products = response.data;\n      } catch (error) {\n        // エラー時の処理\n        console.error(error);\n      }\n    },\n    // 商品詳細モーダルを表示\n    showDetails(product) {\n      this.selectedProduct = product; // 選択された商品をセット\n      this.dialogVisible = true; // モーダルを表示\n    },\n    // モーダルを閉じる\n    closeModal() {\n      this.dialogVisible = false; // モーダルを非表示\n      this.selectedProduct = null; // 選択された商品をクリア\n    },\n    // いいね機能の切り替え\n    async toggleLike(product) {\n      try {\n        console.log('Sending like request for product:', product._id); // デバッグログ追加\n        const response = await axios.post(`http://localhost:3000/api/products/${product._id}/like`);\n        console.log('Received response:', response.data); // デバッグログ追加\n\n        if (response.data.success) {\n          product.likes = response.data.likes;\n          product.isLiked = !product.isLiked;\n        }\n      } catch (error) {\n        console.error('Error details:', error.response || error); // より詳細なエラーログ\n        this.$message({\n          message: 'いいねの更新に失敗しました',\n          type: 'error'\n        });\n      }\n    },\n    // 商品データ取得時にisLikedプロパティを追加\n    async fetchProducts() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/api/products\");\n        // 各商品にisLikedプロパティを追加\n        this.products = response.data.map(product => ({\n          ...product,\n          isLiked: false // 初期状態は「いいねしていない」\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  },\n  // コンポーネントのマウント時に商品リストを取得\n  mounted() {\n    this.fetchProducts();\n  }\n};","map":{"version":3,"names":["axios","data","products","selectedProduct","dialogVisible","methods","fetchProducts","response","get","error","console","showDetails","product","closeModal","toggleLike","log","_id","post","success","likes","isLiked","$message","message","type","map","mounted"],"sources":["/Users/hirookura/Documents/案件/Webアプリ研修/teamC/Day1/frontend/vue.js/src/components/ProductList.vue"],"sourcesContent":["//=============================================================================\n// src/components/ProductList.vue\n//\n// 商品データを表示し、詳細情報や「いいね」機能などを提供するコンポーネントです\n//=============================================================================\n\n//-----------------------------------------------------------------------------\n//テンプレートセレクション\n// テンプレートセクションは、Vue コンポーネントの 見た目（UI）を定義します\n// HTMLに似た記法を使用し、動的データをバインドしてUIをレンダリングします\n//\n// 動的データのバインディング:\n//   {{}}（マスタッシュ記法）を使用して、スクリプトセクションで定義したデータや計算プロパティを表示できます\n// ディレクティブ:\n//   Vue.js 独自の属性（ディレクティブ）を利用して、HTML要素に動的な振る舞いを追加します\n//   例: v-if、v-for、v-bind、v-on。\n//-----------------------------------------------------------------------------\n<template>\n  <div class=\"product-list\">\n    <h1>商品一覧</h1>\n    \n    <!-- 商品をカード形式で表示 -->\n    <div class=\"product-grid\">\n      <!-- 商品ごとにループ(v-for)してカードを生成 -->\n      <!-- Vue.jsではループで生成される要素に一意のキー(key)を設定する必要があります -->\n      <!-- ホバー時に影を表示 -->\n      <el-card\n        v-for=\"product in products\" :key=\"product._id\"\n        class=\"product-card\"\n        shadow=\"hover\"  \n      >\n        <!-- 商品画像 -->\n        <img :src=\"product.images[0]\" alt=\"Product Image\" class=\"product-image\" />\n        \n        <div class=\"product-info\">\n          <!-- 商品名 -->\n          <h2>{{ product.name }}</h2>\n          <!-- 価格 -->\n          <p class=\"price\">価格: {{ product.price }}円</p>\n          <!-- 商品説明 -->\n          <p class=\"description\">{{ product.description }}</p>\n\n          <!-- いいねボタン -->\n          <div class=\"like-button\">\n            <el-button \n              :type=\"product.isLiked ? 'primary' : 'default'\"\n              :icon=\"product.isLiked ? 'el-icon-star-on' : 'el-icon-star-off'\"\n              @click=\"toggleLike(product)\"\n              size=\"small\"\n            >\n              いいね {{ product.likes }}\n            </el-button>\n          </div>\n\n          <!-- 詳細ボタン（クリックでモーダルを表示） -->\n          <el-button type=\"primary\" @click=\"showDetails(product)\">詳細</el-button>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 商品詳細モーダル -->\n    <el-dialog v-model=\"dialogVisible\" title=\"商品詳細\" width=\"50%\">\n      <!-- モーダル内に選択された商品の詳細を表示 -->\n      <div v-if=\"selectedProduct\">\n        <!-- モーダル内の商品画像 -->\n        <img :src=\"selectedProduct.images[0]\" alt=\"Product Image\" class=\"modal-image\" />\n        <!-- 価格情報 -->\n        <p><strong>価格:</strong> {{ selectedProduct.price }}円</p>\n        <!-- 商品説明 -->\n        <p><strong>説明:</strong> {{ selectedProduct.description }}</p>\n        <!-- ブランド -->\n        <p><strong>ブランド:</strong> {{ selectedProduct.brand }}</p>\n        <!-- 商品仕様 -->\n        <p>\n          <strong>仕様:</strong> 素材 - {{ selectedProduct.specifications.material }},\n          長さ - {{ selectedProduct.specifications.length }}\n        </p>\n      </div>\n      <!-- モーダルのフッター（閉じるボタン） -->\n      <template #footer>\n        <el-button @click=\"closeModal\">閉じる</el-button>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n//-----------------------------------------------------------------------------\n//スクリプトセレクション\n// スクリプトセクションは、コンポーネントの ロジック や データ管理 を記述します\n// 主に JavaScript を使い、Vue コンポーネントの機能を実装します\n//\n// オブジェクト形式で定義\n// ・data    : コンポーネントの状態を保持\n// ・methods : ユーザーアクションやカスタムロジックを実装\n// ・computed: データの派生値（キャッシュされる）\n// ・watch   : 特定のデータの変化を監視し、対応する処理を実行\n// ・ライフサイクルフック: コンポーネントの初期化や破棄時に実行するコードを記述（例: mounted）\n//-----------------------------------------------------------------------------\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      products: [],          // 商品リストを格納\n      selectedProduct: null, // 選択された商品の情報を格納\n      dialogVisible: false,  // モーダルの表示/非表示を制御\n    };\n  },\n  methods: {\n    // 商品リストをAPIから取得\n    async fetchProducts() {\n      try {\n        // APIリクエスト\n        // const response = await axios.get(\"http://18.178.128.74:3000/api/products\");\n        const response = await axios.get(\"http://localhost:3000/api/products\");     // ローカルで立ち上げる場合\n        // 商品リストをデータに設定\n        this.products = response.data;\n      } catch (error) {\n        // エラー時の処理\n        console.error(error);\n      }\n    },\n    // 商品詳細モーダルを表示\n    showDetails(product) {\n      this.selectedProduct = product; // 選択された商品をセット\n      this.dialogVisible = true;      // モーダルを表示\n    },\n    // モーダルを閉じる\n    closeModal() {\n      this.dialogVisible = false;    // モーダルを非表示\n      this.selectedProduct = null;   // 選択された商品をクリア\n    },\n    // いいね機能の切り替え\n    async toggleLike(product) {\n      try {\n        console.log('Sending like request for product:', product._id); // デバッグログ追加\n        const response = await axios.post(`http://localhost:3000/api/products/${product._id}/like`);\n        console.log('Received response:', response.data); // デバッグログ追加\n        \n        if (response.data.success) {\n            product.likes = response.data.likes;\n            product.isLiked = !product.isLiked;\n        }\n      } catch (error) {\n        console.error('Error details:', error.response || error); // より詳細なエラーログ\n        this.$message({\n          message: 'いいねの更新に失敗しました',\n          type: 'error'\n        });\n      }\n    },\n    // 商品データ取得時にisLikedプロパティを追加\n    async fetchProducts() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/api/products\");\n        // 各商品にisLikedプロパティを追加\n        this.products = response.data.map(product => ({\n          ...product,\n          isLiked: false // 初期状態は「いいねしていない」\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n  // コンポーネントのマウント時に商品リストを取得\n  mounted() {\n    this.fetchProducts();\n  },\n};\n</script>\n\n//-----------------------------------------------------------------------------\n//スタイルセレクション\n// スタイルセクションは、コンポーネントのデザインやレイアウトを定義します。CSSやSCSSなどを記述します\n//\n// コンポーネントスコープ\n// ・スタイルをそのコンポーネントに限定することができます（scoped 属性）\n// プリプロセッサ\n// ・SCSS、LESS、Stylus などの CSS 拡張言語を利用可能\n//-----------------------------------------------------------------------------\n<style>\n/* 商品リスト全体のスタイル */\n.product-list {\n  max-width: 1200px;   /* コンテンツの最大幅を指定 */\n  margin: auto;        /* コンテンツを中央寄せ */\n  text-align: center;  /* テキストを中央揃え */\n}\n\n/* 商品カードのグリッドレイアウト */\n.product-grid {\n  display: grid;  /* グリッドレイアウトを使用 */\n  gap: 20px;      /* 各カード間のスペース */\n  /* カラムを自動調整 */\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); \n}\n\n/* 商品カードのデザイン */\n.product-card {\n  padding: 20px;                    /* カード内の余白を設定 */\n  border: 1px solid #eee;           /* カードの枠線の色を薄いグレーに設定 */\n  display: flex;                    /* フレックスボックスを使用 */\n  flex-direction: column;           /* 縦方向に配置 */\n  justify-content: space-between;   /* 上下の要素を均等配置 */\n  height: 100%;                     /* 高さを揃える */\n}\n\n/* 商品情報のレイアウト */\n.product-info {\n  display: flex;                    /* フレックスボックスを使用 */\n  flex-direction: column;           /* 情報を縦方向に配置 */\n  flex-grow: 1;                     /* スペースを確保 */\n  justify-content: space-between;   /* 上下の要素間を均等に配置 */\n}\n\n/* 商品画像のスタイル */\n.product-image {\n  width: 100%;         /* 横幅をカード全体に合わせる */\n  height: auto;        /* 縦横比を維持しながら画像をリサイズ */\n  margin-bottom: 10px; /* 下に余白を追加 */\n}\n\n/* 価格のテキストデザイン */\n.price {\n  font-weight: bold;  /* テキストを太字に設定 */\n  color: #555;        /* ダークグレーの色を使用 */\n}\n\n/* 商品説明テキスト */\n.description {\n  margin: 10px 0;   /* 上下に余白を追加 */\n  flex-grow: 1;     /* ボタンを下部に配置するための余白確保 */\n}\n\n/* モーダル内の画像スタイル */\n.modal-image {\n  width: 50%;            /* 画面幅に応じたサイズ調整 */\n  height: auto;          /* 縦横比を維持してリサイズ */\n  margin-bottom: 20px;   /* 下に余白を追加 */\n}\n\n.like-button {\n  margin: 10px 0;\n}\n\n.like-button .el-button {\n  transition: all 0.3s ease;\n}\n\n.like-button .el-button.is-liked {\n  color: #409EFF;\n}\n\n/* いいねボタンのアイコンのアニメーション */\n.like-button .el-button:active {\n  transform: scale(0.95);\n}\n</style>\n"],"mappings":"AAmGA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MAAW;MACvBC,eAAe,EAAE,IAAI;MAAE;MACvBC,aAAa,EAAE,KAAK,CAAG;IACzB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF;QACA;QACA,MAAMC,QAAO,GAAI,MAAMP,KAAK,CAACQ,GAAG,CAAC,oCAAoC,CAAC,EAAM;QAC5E;QACA,IAAI,CAACN,QAAO,GAAIK,QAAQ,CAACN,IAAI;MAC/B,EAAE,OAAOQ,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IACD;IACAE,WAAWA,CAACC,OAAO,EAAE;MACnB,IAAI,CAACT,eAAc,GAAIS,OAAO,EAAE;MAChC,IAAI,CAACR,aAAY,GAAI,IAAI,EAAO;IAClC,CAAC;IACD;IACAS,UAAUA,CAAA,EAAG;MACX,IAAI,CAACT,aAAY,GAAI,KAAK,EAAK;MAC/B,IAAI,CAACD,eAAc,GAAI,IAAI,EAAI;IACjC,CAAC;IACD;IACA,MAAMW,UAAUA,CAACF,OAAO,EAAE;MACxB,IAAI;QACFF,OAAO,CAACK,GAAG,CAAC,mCAAmC,EAAEH,OAAO,CAACI,GAAG,CAAC,EAAE;QAC/D,MAAMT,QAAO,GAAI,MAAMP,KAAK,CAACiB,IAAI,CAAC,sCAAsCL,OAAO,CAACI,GAAG,OAAO,CAAC;QAC3FN,OAAO,CAACK,GAAG,CAAC,oBAAoB,EAAER,QAAQ,CAACN,IAAI,CAAC,EAAE;;QAElD,IAAIM,QAAQ,CAACN,IAAI,CAACiB,OAAO,EAAE;UACvBN,OAAO,CAACO,KAAI,GAAIZ,QAAQ,CAACN,IAAI,CAACkB,KAAK;UACnCP,OAAO,CAACQ,OAAM,GAAI,CAACR,OAAO,CAACQ,OAAO;QACtC;MACF,EAAE,OAAOX,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACF,QAAO,IAAKE,KAAK,CAAC,EAAE;QAC1D,IAAI,CAACY,QAAQ,CAAC;UACZC,OAAO,EAAE,eAAe;UACxBC,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;IACF,CAAC;IACD;IACA,MAAMjB,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMP,KAAK,CAACQ,GAAG,CAAC,oCAAoC,CAAC;QACtE;QACA,IAAI,CAACN,QAAO,GAAIK,QAAQ,CAACN,IAAI,CAACuB,GAAG,CAACZ,OAAM,KAAM;UAC5C,GAAGA,OAAO;UACVQ,OAAO,EAAE,KAAI,CAAE;QACjB,CAAC,CAAC,CAAC;MACL,EAAE,OAAOX,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF;EACF,CAAC;EACD;EACAgB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACnB,aAAa,CAAC,CAAC;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}