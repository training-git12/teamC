{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"product-list\"\n};\nconst _hoisted_2 = {\n  class: \"product-grid\"\n};\nconst _hoisted_3 = [\"src\"];\nconst _hoisted_4 = {\n  class: \"product-info\"\n};\nconst _hoisted_5 = {\n  class: \"price\"\n};\nconst _hoisted_6 = {\n  class: \"description\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = [\"src\"];\nconst _hoisted_9 = {\n  class: \"like-section\"\n};\nexport function render(_ctx, _cache) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[10] || (_cache[10] = _createElementVNode(\"h1\", null, \"商品一覧\", -1 /* HOISTED */)), _createCommentVNode(\" 商品をカード形式で表示 \"), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 商品ごとにループ(v-for)してカードを生成 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.products, product => {\n    return _openBlock(), _createBlock(_component_el_card, {\n      key: product._id,\n      class: \"product-card\",\n      shadow: \"hover\"\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\" 商品画像 \"), _createElementVNode(\"img\", {\n        src: product.images[0],\n        alt: \"Product Image\",\n        class: \"product-image\"\n      }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 商品名 \"), _createElementVNode(\"h2\", null, _toDisplayString(product.name), 1 /* TEXT */), _createCommentVNode(\" 価格 \"), _createElementVNode(\"p\", _hoisted_5, \"価格: \" + _toDisplayString(product.price) + \"円\", 1 /* TEXT */), _createCommentVNode(\" 商品説明 \"), _createElementVNode(\"p\", _hoisted_6, _toDisplayString(product.description), 1 /* TEXT */), _createCommentVNode(\" 詳細ボタン \"), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $event => _ctx.showDetails(product)\n      }, {\n        default: _withCtx(() => [...(_cache[1] || (_cache[1] = [_createTextVNode(\"詳細\")]))]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])])]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 商品詳細モーダル \"), _createVNode(_component_el_dialog, {\n    modelValue: _ctx.dialogVisible,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.dialogVisible = $event),\n    title: \"商品詳細\",\n    width: \"50%\"\n  }, {\n    footer: _withCtx(() => [_createVNode(_component_el_button, {\n      onClick: _ctx.closeModal\n    }, {\n      default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\"閉じる\")])),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])]),\n    default: _withCtx(() => [_ctx.selectedProduct ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createCommentVNode(\" 商品画像 \"), _createElementVNode(\"img\", {\n      src: _ctx.selectedProduct.images[0],\n      alt: \"Product Image\",\n      class: \"modal-image\"\n    }, null, 8 /* PROPS */, _hoisted_8), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"価格:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.selectedProduct.price) + \"円\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"説明:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.selectedProduct.description), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"ブランド:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.selectedProduct.brand), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"strong\", null, \"仕様:\", -1 /* HOISTED */)), _createTextVNode(\" 素材 - \" + _toDisplayString(_ctx.selectedProduct.specifications.material) + \", 長さ - \" + _toDisplayString(_ctx.selectedProduct.specifications.length), 1 /* TEXT */)]), _createCommentVNode(\" いいねセクション \"), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"p\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"strong\", null, \"いいね！:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.selectedProduct.likes || 0), 1 /* TEXT */)]), !_ctx.likedProducts[_ctx.selectedProduct._id] ? (_openBlock(), _createBlock(_component_el_button, {\n      key: 0,\n      type: \"success\",\n      onClick: _ctx.likeProduct\n    }, {\n      default: _withCtx(() => _cache[7] || (_cache[7] = [_createTextVNode(\" いいね \")])),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])) : (_openBlock(), _createBlock(_component_el_tag, {\n      key: 1,\n      type: \"success\"\n    }, {\n      default: _withCtx(() => _cache[8] || (_cache[8] = [_createTextVNode(\"いいね済み\")])),\n      _: 1 /* STABLE */\n    }))])])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","_hoisted_2","_Fragment","_renderList","_ctx","products","product","_createBlock","_component_el_card","_id","shadow","default","_withCtx","src","images","alt","_hoisted_3","_hoisted_4","_toDisplayString","name","_hoisted_5","price","_hoisted_6","description","_createVNode","_component_el_button","type","onClick","$event","showDetails","_cache","_createTextVNode","_","_component_el_dialog","modelValue","dialogVisible","title","width","footer","closeModal","selectedProduct","_hoisted_7","_hoisted_8","brand","specifications","material","length","_hoisted_9","likes","likedProducts","likeProduct","_component_el_tag"],"sources":["/Users/hirookura/Documents/案件/Webアプリ研修/teamC/Day1/frontend/vue.js/src/components/ProductList.vue"],"sourcesContent":["//=============================================================================\n// src/components/ProductList.vue\n//\n// 商品データを表示し、詳細情報や「いいね」機能などを提供するコンポーネントです\n//=============================================================================\n\n//-----------------------------------------------------------------------------\n//テンプレートセレクション\n// テンプレートセクションは、Vue コンポーネントの 見た目（UI）を定義します\n// HTMLに似た記法を使用し、動的データをバインドしてUIをレンダリングします\n//\n// 動的データのバインディング:\n//   {{}}（マスタッシュ記法）を使用して、スクリプトセクションで定義したデータや計算プロパティを表示できます\n// ディレクティブ:\n//   Vue.js 独自の属性（ディレクティブ）を利用して、HTML要素に動的な振る舞いを追加します\n//   例: v-if、v-for、v-bind、v-on。\n//-----------------------------------------------------------------------------\n<template>\n  <div class=\"product-list\">\n    <h1>商品一覧</h1>\n    \n    <!-- 商品をカード形式で表示 -->\n    <div class=\"product-grid\">\n      <!-- 商品ごとにループ(v-for)してカードを生成 -->\n      <el-card\n        v-for=\"product in products\"\n        :key=\"product._id\"\n        class=\"product-card\"\n        shadow=\"hover\"\n      >\n        <!-- 商品画像 -->\n        <img :src=\"product.images[0]\" alt=\"Product Image\" class=\"product-image\" />\n        \n        <div class=\"product-info\">\n          <!-- 商品名 -->\n          <h2>{{ product.name }}</h2>\n          <!-- 価格 -->\n          <p class=\"price\">価格: {{ product.price }}円</p>\n          <!-- 商品説明 -->\n          <p class=\"description\">{{ product.description }}</p>\n          <!-- 詳細ボタン -->\n          <el-button type=\"primary\" @click=\"showDetails(product)\">詳細</el-button>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 商品詳細モーダル -->\n    <el-dialog v-model=\"dialogVisible\" title=\"商品詳細\" width=\"50%\">\n      <div v-if=\"selectedProduct\">\n        <!-- 商品画像 -->\n        <img :src=\"selectedProduct.images[0]\" alt=\"Product Image\" class=\"modal-image\" />\n        <p><strong>価格:</strong> {{ selectedProduct.price }}円</p>\n        <p><strong>説明:</strong> {{ selectedProduct.description }}</p>\n        <p><strong>ブランド:</strong> {{ selectedProduct.brand }}</p>\n        <p>\n          <strong>仕様:</strong> 素材 - {{ selectedProduct.specifications.material }},\n          長さ - {{ selectedProduct.specifications.length }}\n        </p>\n\n        <!-- いいねセクション -->\n        <div class=\"like-section\">\n          <p><strong>いいね！:</strong> {{ selectedProduct.likes || 0 }}</p>\n          <el-button\n            v-if=\"!likedProducts[selectedProduct._id]\"\n            type=\"success\"\n            @click=\"likeProduct\"\n          >\n            いいね\n          </el-button>\n          <el-tag v-else type=\"success\">いいね済み</el-tag>\n        </div>\n      </div>\n      <template #footer>\n        <el-button @click=\"closeModal\">閉じる</el-button>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n//-----------------------------------------------------------------------------\n//スクリプトセレクション\n// スクリプトセクションは、コンポーネントの ロジック や データ管理 を記述します\n// 主に JavaScript を使い、Vue コンポーネントの機能を実装します\n//\n// オブジェクト形式で定義\n// ・data    : コンポーネントの状態を保持\n// ・methods : ユーザーアクションやカスタムロジックを実装\n// ・computed: データの派生値（キャッシュされる）\n// ・watch   : 特定のデータの変化を監視し、対応する処理を実行\n// ・ライフサイクルフック: コンポーネントの初期化や破棄時に実行するコードを記述（例: mounted）\n//-----------------------------------------------------------------------------\n<script>\n//axios: HTTPリクエストライブラリで、APIを通じてバックエンドと通信します\nimport axios from \"axios\";\n\nexport default {\n  //データプロパティ\n  data() {\n    return {\n      products: [],\n      selectedProduct: null,\n      likedProducts: {},\n      currentUserId: \"671e0166eed5dc448afe6911\",\n      dialogVisible: false,\n      isAdminMode: false,  // 管理者モードのフラグを追加\n    };\n  },\n  \n  //コンポーネントが初期化された際に呼び出されるライフサイクルフック\n  async mounted() {\n    await this.fetchProducts();      // 商品リストをAPIから取得\n    await this.fetchLikedProducts(); // ユーザーが「いいね」した商品の状態を取得\n  },\n  \n  methods: {\n    //いいね済み商品の取得\n    // ユーザーが「いいね」した商品IDを取得し、likedProducts オブジェクトに記録します\n    async fetchLikedProducts() {\n      try {\n<<<<<<< Updated upstream\n        // APIリクエスト\n        const response = await axios.get(\"http://18.178.128.74:3000/api/products\");\n        // const response = await axios.get(\"http://localhost:3000/api/products\");     // ローカルで立ち上げる場合\n        // 商品リストをデータに設定\n        this.products = response.data;\n=======\n        this.likedProducts = {};\n        const response = await axios.get(\n          `http://18.178.128.74:3000/api/liked-products/${this.currentUserId}`\n        );\n        response.data.forEach((productId) => {\n          this.likedProducts[productId] = true;\n        });\n>>>>>>> Stashed changes\n      } catch (error) {\n        console.error(\"Error fetching liked products:\", error);\n      }\n    },\n    \n    //「いいね」状態を更新\n    // 商品詳細モーダルで現在表示されている商品の「いいね」数を最新の状態に更新します\n    updateSelectedProductLikeStatus() {\n      if (this.selectedProduct) {\n        this.selectedProduct.likes =\n          this.products.find(\n            (product) => product._id === this.selectedProduct._id\n          )?.likes || 0;\n      }\n    },\n    \n    //商品リストの取得\n    // API (/api/products) を呼び出して商品データを取得し、products 配列に保存します\n    async fetchProducts() {\n      try {\n        const response = await axios.get(\n          \"http://18.178.128.74:3000/api/products\"\n        );\n        console.log(\"取得した商品データ:\", response.data); // デバッグ用\n        this.products = response.data;\n      } catch (error) {\n        console.error(\"Error fetching products:\", error); // エラーログ\n      }\n    },\n    \n    //商品詳細の表示\n    // ユーザーが商品をクリックした際に、選択した商品データをselectedProductに設定し、\n    // モーダルを表示します\n    showDetails(product) {\n      this.selectedProduct = product;  // 選択した商品を格納\n      this.dialogVisible = true;       // モーダルを表示\n    },\n    \n    //商品詳細モーダルを閉じる\n    // モーダルを閉じる際に、selectedProductをリセットして非表示にします\n    closeModal() {\n      this.selectedProduct = null;  // 選択状態をリセット\n      this.dialogVisible = false;   // モーダルを非表示\n    },\n    \n    //商品を「いいね」する\n    // ユーザーが「いいね」をクリックすると、APIにリクエストを送信し、「いいね」状態を更新します\n    // 成功した場合、モーダル内の「いいね」数を更新し、ローカル状態にも反映します\n    async likeProduct() {\n      const productId = this.selectedProduct._id;\n\n      if (this.likedProducts[productId]) {\n        console.log(\"Product is already liked:\", productId);\n        return;\n      }\n\n      try {\n        await axios.post(\"http://18.178.128.74:3000/api/like\", {\n          userId: this.currentUserId,\n          productId,\n        });\n\n        const updatedProduct = await axios.get(\n          `http://18.178.128.74:3000/api/products/${productId}`\n        );\n        // 更新された「いいね」数\n        this.selectedProduct.likes = updatedProduct.data.likes;\n        // 状態を更新\n        this.likedProducts[productId] = true;\n      } catch (error) {\n        console.error(\"Error liking product:\", error);\n      }\n    },\n\n    // いいねを削除（個別）\n    async removeLike(productId) {\n      try {\n        await axios.delete(`http://18.178.128.74:3000/api/like`, {\n          data: {\n            userId: this.currentUserId,\n            productId: productId\n          }\n        });\n        \n        // ローカルの状態を更新\n        this.likedProducts[productId] = false;\n        await this.fetchProducts(); // 商品リストを再取得\n      } catch (error) {\n        console.error(\"Error removing like:\", error);\n      }\n    },\n\n    // 全てのいいねを削除\n    async clearAllLikes() {\n      try {\n        const confirmed = await ElMessageBox.confirm(\n          'すべてのいいねを削除してもよろしいですか？',\n          '確認',\n          {\n            confirmButtonText: '削除',\n            cancelButtonText: 'キャンセル',\n            type: 'warning'\n          }\n        );\n\n        if (confirmed) {\n          // いいね済みの商品のIDを取得\n          const likedProductIds = Object.keys(this.likedProducts).filter(id => this.likedProducts[id]);\n          \n          // すべてのいいねを削除\n          await Promise.all(likedProductIds.map(id => this.removeLike(id)));\n          \n          ElMessage.success('すべてのいいねを削除しました');\n        }\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error(\"Error clearing likes:\", error);\n          ElMessage.error('いいねの一括削除に失敗しました');\n        }\n      }\n    },\n  },\n};\n</script>\n\n\n//-----------------------------------------------------------------------------\n//スタイルセレクション\n// スタイルセクションは、コンポーネントのデザインやレイアウトを定義します。CSSやSCSSなどを記述します\n//\n// コンポーネントスコープ\n// ・スタイルをそのコンポーネントに限定することができます（scoped 属性）\n// プリプロセッサ\n// ・SCSS、LESS、Stylus などの CSS 拡張言語を利用可能\n//-----------------------------------------------------------------------------\n<style>\n/* 商品リスト全体のスタイル */\n.product-list {\n  max-width: 1200px;   /* コンテンツの最大幅を指定 */\n  margin: auto;        /* コンテンツを中央寄せ */\n  text-align: center;  /* テキストを中央揃え */\n}\n\n/* 商品カードのグリッドレイアウト */\n.product-grid {\n  display: grid;  /* グリッドレイアウトを使用 */\n  gap: 20px;      /* 各カード間のスペース */\n  /* カラムを自動調整 */\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); \n}\n\n/* 商品カードのデザイン */\n.product-card {\n  padding: 20px;                    /* カード内の余白を設定 */\n  border: 1px solid #eee;           /* カードの枠線の色を薄いグレーに設定 */\n  display: flex;                    /* フレックスボックスを使用 */\n  flex-direction: column;           /* 縦方向に配置 */\n  justify-content: space-between;   /* 上下の要素を均等配置 */\n  height: 100%;                     /* 高さを揃える */\n}\n\n/* 商品情報のレイアウト */\n.product-info {\n  display: flex;                    /* フレックスボックスを使用 */\n  flex-direction: column;           /* 情報を縦方向に配置 */\n  flex-grow: 1;                     /* スペースを確保 */\n  justify-content: space-between;   /* 上下の要素間を均等に配置 */\n}\n\n/* 商品画像のスタイル */\n.product-image {\n  width: 100%;         /* 横幅をカード全体に合わせる */\n  height: auto;        /* 縦横比を維持しながら画像をリサイズ */\n  margin-bottom: 10px; /* 下に余白を追加 */\n}\n\n/* 価格のテキストデザイン */\n.price {\n  font-weight: bold;  /* テキストを太字に設定 */\n  color: #555;        /* ダークグレーの色を使用 */\n}\n\n/* 商品説明テキスト */\n.description {\n  margin: 10px 0;   /* 上下に余白を追加 */\n  flex-grow: 1;     /* ボタンを下部に配置するための余白確保 */\n}\n\n/* モーダル内の画像スタイル */\n.modal-image {\n  width: 50%;            /* 画面幅に応じたサイズ調整 */\n  height: auto;          /* 縦横比を維持してリサイズ */\n  margin-bottom: 20px;   /* 下に余白を追加 */\n}\n\n/* いいねアイコンのスタイル */\n.like-section {\n  display: flex;          /* アイコンとテキストを横並びに配置 */\n  align-items: center;    /* 要素を垂直方向の中央に揃える */\n  gap: 10px;              /* アイコンとテキストの間に余白を設定 */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}